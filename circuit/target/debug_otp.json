{"debug_symbols":[{"locations":{"0":[{"span":{"start":278,"end":319},"file":1},{"span":{"start":744,"end":782},"file":2}],"1":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"2":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"3":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"4":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"5":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"6":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"7":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"8":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"9":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"10":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"11":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"12":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"13":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":716,"end":728},"file":10}],"14":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"15":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"16":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"17":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"18":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"19":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"20":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"21":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":716,"end":728},"file":10}],"22":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"23":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"24":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"25":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"26":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"27":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"28":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"29":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":716,"end":728},"file":10}],"30":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"31":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"32":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"33":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"34":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"35":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"36":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"37":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":716,"end":728},"file":10}],"38":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"39":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"40":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"41":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"42":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"43":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"44":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"45":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":716,"end":728},"file":10}],"46":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"47":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"48":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"49":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"50":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"51":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"52":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"53":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":716,"end":728},"file":10}],"54":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"55":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"56":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"57":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"58":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"59":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"60":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"61":[{"span":{"start":478,"end":499},"file":1}],"62":[{"span":{"start":559,"end":606},"file":1},{"span":{"start":744,"end":782},"file":2}],"63":[{"span":{"start":651,"end":677},"file":1}]}}],"file_map":{"1":{"source":"use dep::std;\n\nfn main(\n    root: pub Field,\n    nullifierHash: pub Field,\n    index: Field,\n    hash_path: [Field; 6],\n    otp: Field,\n    timestep: pub Field // time step value. block.timestamp / 180\n) {\n    // std::println(otp);\n    // std::println(timestep);\n    let leaf = std::hash::pedersen_hash([otp, timestep]);\n    // std::println(leaf);\n\n    let computed_root = std::merkle::compute_merkle_root(leaf, index, hash_path);\n    // std::println(computed_root);\n    assert(computed_root == root);\n\n    // Compute input note nullifier\n    let nullifier = std::hash::pedersen_hash([leaf, otp, timestep]);\n    // std::println(nullifier);\n    assert(nullifierHash == nullifier);\n}\n\n#[test]\nfn test_main() {\n    let root = 0x054be3e86a2ccc9689b491bcd1c0ff71bb267f953d45e6bb2171f50a9da3f55a;\n\n    let nullifierHash = 0x229a5c94d1a2531a546bd9d791a40d418a724cfb1bd163e21811707000297097;\n\n    let index = 1;\n\n    let hash_path: [Field; 6] = [\n        0x26895d31feb61c575092c6e33ee9bca4227cefdf18df11abcf12db67cfab65ba,\n        0x0e94145a184ca0073db3c5ba821289bffef0b4c9d96f61839714cc88f1e910dd,\n        0x0900f3c14feca5b92d7bd733e0663a7ed3a1106416dc81f4bd348a634c19ba0e,\n        0x08e4dfdd53de8665d02c380664e11f1bdd95fb1a53eb93f467f7d1f4bf3648b1,\n        0x052df258e0c8d44aa31459482a902ff2d0f239a24775eee493763f0141b704c9,\n        0x271dbd4080e76ca78a493a486a7d18bb43a38d140d1ea5cd2e594e748a79297d\n    ];\n\n    let otp = 426939;\n    let timestep = 9490425;\n\n    // below also work\n    // let otp = 0x0683bb;\n    // let timestep = 0x90cff9;\n\n    main(root, nullifierHash, index, hash_path, otp, timestep);\n}\n","path":"/Users/jack-sw/Codes/safe/otp/circuit/src/main.nr"},"2":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"},"10":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"20":{"source":"impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n","path":"std/field.nr"}},"warnings":[]}